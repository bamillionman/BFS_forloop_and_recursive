def depth_first_print(graph, source):         
    stack = [source]                      # for depth first we use stack to get the depth. in this case its a list for python. We create the stack list by 
                                          # putting the source into the brackets.
    while len(stack) > 0:                 # while there are items("neighbors", "unvistited") in the stack then we can create our current node by making it 
        current = stack.pop()             # from the pop of the top of our stack.
        print(current)

        for neighbor in graph[current]:  # to get our "neighbor" or to add to the stack we are working off, we loop through the graph at the current position
            stack.append(neighbor)       # then we "push" (or in python append) the neighbor to the stack.

# Call it like this:
graph = {
    'a': ['c', 'b'],
    'b': ['d'],
    'c': ['e'],
    'd': ['f'],
    'e': [],
    'f': []
}

depth_first_print(graph, 'a')

'''
To do this recursivly 

def depth_first_print(graph, source)

  print(source)                        # we need this to print out the search
                                       
  for neighbor in graph[source]        # we then for loop through the graph at source. we create the neighbor with the loop call. brackets for dictionary in python
    depth_first_print(graph, neigbor)  # we call the function inside the function but this time we use neigbor from what we just created in the for loop and that will go on til done

'''
